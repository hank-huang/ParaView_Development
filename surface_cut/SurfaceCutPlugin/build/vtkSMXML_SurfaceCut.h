// Loadable modules
//
// Generated by /export/bofur/che/paraview/paraview_build/bin/vtkkwProcessXML-pv5.6
//
#ifndef __vtkSMXML_SurfaceCut_h
#define __vtkSMXML_SurfaceCut_h

#include <string.h>
#include <cassert>
#include <algorithm>


// From file /cis/home/che/Documents/SurfaceCutPlugin/surfaceCut.xml
static const char* const SurfaceCutsurfaceCutInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <ProxyGroup name=\"filters\">\n"
"    <!-- ================================================================== -->\n"
"    <SourceProxy name=\"SurfaceCut\" class=\"surfaceCut\" label=\"Surface Cut\">\n"
"      <Documentation\n"
"         long_help=\"uses implicit selection loop and vtkClipPolyData to extract\n"
"         a user-defined region from the surface.\"\n"
"         short_help=\"Clip the surface along circle of points.\">\n"
"      </Documentation>\n"
"\n"
"      <InputProperty\n"
"         name=\"Input\"\n"
"	       port_index=\"0\"\n"
"         command=\"SetInputConnection\">\n"
"        <ProxyGroupDomain name=\"groups\">\n"
"          <Group name=\"sources\"/>\n"
"          <Group name=\"filters\"/>\n"
"        </ProxyGroupDomain>\n"
"        <DataTypeDomain name=\"input_type\">\n"
"          <DataType value=\"vtkPolyData\"/>\n"
"        </DataTypeDomain>\n"
"        <Documentation>\n"
"          Set the source data set.\n"
"        </Documentation>\n"
"      </InputProperty>\n"
"\n"
"      <InputProperty\n"
"         name=\"Selection\"\n"
"         port_index=\"1\"\n"
"         command=\"SetInputConnection\">\n"
"        <ProxyGroupDomain name=\"groups\">\n"
"          <Group name=\"sources\"/>\n"
"          <Group name=\"filters\"/>\n"
"        </ProxyGroupDomain>\n"
"        <DataTypeDomain name=\"input_type\">\n"
"          <DataType value=\"vtkPolyData\"/>\n"
"        </DataTypeDomain>\n"
"        <Documentation>\n"
"          Dijkstra's loop.\n"
"        </Documentation>\n"
"      </InputProperty>\n"
"\n"
"    </SourceProxy>\n"
"  </ProxyGroup>\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* SurfaceCutsurfaceCutInterfaces()
{

  const size_t len0 = strlen(SurfaceCutsurfaceCutInterfaces0);
  size_t len = ( 0
    + len0 );
  char* res = new char[ len + 1];
  size_t offset = 0;
  std::copy(SurfaceCutsurfaceCutInterfaces0, SurfaceCutsurfaceCutInterfaces0 + len0, res + offset); offset += len0;
  assert(offset == len);
  res[offset] = 0;
  return res;
}



#endif
