// Loadable modules
//
// Generated by /export/bofur/che/paraview/paraview_build/bin/vtkkwProcessXML-pv5.6
//
#ifndef __vtkSMXML_DijkstraGraphGeodesicPathFilter_h
#define __vtkSMXML_DijkstraGraphGeodesicPathFilter_h

#include <string.h>
#include <cassert>
#include <algorithm>


// From file /cis/home/hhuang/ParaView_Files/myPlugins/plugin1/vtkDijkstraGraphGeodesicPathHenry.xml
static const char* const DijkstraGraphGeodesicPathFiltervtkDijkstraGraphGeodesicPathHenryInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <ProxyGroup name=\"filters\">\n"
"   <SourceProxy name=\"DijkstraGraphGeodesicPath\" class=\"vtkDijkstraGraphGeodesicPathHenry\" label=\"My DGGP\">\n"
"     <Documentation\n"
"        long_help=\"Shortest path calculation between two points.\"\n"
"        short_help=\"shortest path.\">\n"
"     </Documentation>\n"
"     <InputProperty\n"
"        name=\"Input\"\n"
"        command=\"SetInputConnection\">\n"
"           <ProxyGroupDomain name=\"groups\">\n"
"             <Group name=\"sources\"/>\n"
"             <Group name=\"filters\"/>\n"
"           </ProxyGroupDomain>\n"
"           <DataTypeDomain name=\"input_type\">\n"
"             <DataType value=\"vtkDataSet\"/>\n"
"           </DataTypeDomain>\n"
"      </InputProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"         name=\"StartVertex\"\n"
"         label=\"Start Vertex\"\n"
"         command=\"SetStartVertex\"\n"
"         number_of_elements=\"1\"\n"
"         animateable=\"1\"\n"
"         default_values=\"0\" >\n"
"         <Documentation>\n"
"           Define start point. Default is 0.\n"
"         </Documentation>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"         name=\"EndVertex\"\n"
"         label=\"End Vertex\"\n"
"         command=\"SetEndVertex\"\n"
"         number_of_elements=\"1\"\n"
"         animateable=\"1\"\n"
"         default_values=\"10\" >\n"
"         <Documentation>\n"
"           Define end point. Default is 10.\n"
"         </Documentation>\n"
"       </DoubleVectorProperty>\n"
"\n"
"       <IntVectorProperty\n"
"          name=\"LineType\"\n"
"          command=\"SetLineType\"\n"
"          number_of_elements=\"1\"\n"
"          default_values=\"0\" >\n"
"        <EnumerationDomain name=\"enum\">\n"
"          <Entry value=\"0\" text=\"Geodesic\"/>\n"
"          <Entry value=\"1\" text=\"Sulcus\"/>\n"
"          <Entry value=\"2\" text=\"Gyrus\"/>\n"
"        </EnumerationDomain>\n"
"        <Documentation>\n"
"          This propery specifies which type of curvature to compute.\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"\n"
"   </SourceProxy>\n"
" </ProxyGroup>\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* DijkstraGraphGeodesicPathFiltervtkDijkstraGraphGeodesicPathHenryInterfaces()
{

  const size_t len0 = strlen(DijkstraGraphGeodesicPathFiltervtkDijkstraGraphGeodesicPathHenryInterfaces0);
  size_t len = ( 0
    + len0 );
  char* res = new char[ len + 1];
  size_t offset = 0;
  std::copy(DijkstraGraphGeodesicPathFiltervtkDijkstraGraphGeodesicPathHenryInterfaces0, DijkstraGraphGeodesicPathFiltervtkDijkstraGraphGeodesicPathHenryInterfaces0 + len0, res + offset); offset += len0;
  assert(offset == len);
  res[offset] = 0;
  return res;
}



#endif
